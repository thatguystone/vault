#!/usr/bin/env python3

import argparse
import inspect
import os
import sys

from vault import Vault

if os.getuid() != 0:
	print("Error: {} must be run as root".format(sys.argv[0]))
	sys.exit(1)

def _mount_dir(arg, file):
	if not arg:
		arg = os.path.join("/mnt", os.path.basename(file))
	return arg

def open(args):
	Vault(args.vault).open(
		_mount_dir(args.mount_dir, args.vault))

def close(args):
	Vault(args.vault).close()

def create(args):
	kwargs = {}

	cargs, _, _, defaults = inspect.getargspec((Vault.create))
	for arg in cargs[-len(defaults):]:
		attr = getattr(args, arg, None)
		if attr:
			kwargs[arg] = attr

	Vault(args.vault).create(
		_mount_dir(args.mount_dir, args.vault),
		args.size,
		**kwargs)

def grow(args):
	Vault(args.vault).grow(args.how_much)

def shrink(args):
	Vault(args.vault).shrink(args.how_much)

def help(args):
	parser.print_help()

parser = argparse.ArgumentParser(prog="vault")
parser.set_defaults(func=help)
subs = parser.add_subparsers(help="command help")

sub_open = subs.add_parser("open", help="open a vault")
sub_open.set_defaults(func=open)
sub_open.add_argument("vault",
	metavar="vault.vlt",
	help="vault file to mount")
sub_open.add_argument("mount_dir",
	default=None, nargs="?",
	help="where to mount the vault")

sub_close = subs.add_parser("close", help="close a vault")
sub_close.set_defaults(func=close)
sub_close.add_argument("vault",
	help="vault to close")

sub_create = subs.add_parser("create", help="create and open a new vault")
sub_create.set_defaults(func=create)
sub_create.add_argument("vault",
	metavar="vault.vlt",
	help="vault file to create")
sub_create.add_argument("size",
	help="how large the vault should be; may be a human unit "
		"(eg. 15m, 1g, etc) or a byte value")
sub_create.add_argument("mount_dir",
	default=None, nargs="?",
	help="where to mount the vault")
sub_create.add_argument("--randomize",
	action="store_true",
	default=None,
	help="if the vault file should be randomized to hide where data is")
sub_create.add_argument("--fs-type",
	metavar="ext4",
	default=None,
	help="while filesystem to use")
sub_create.add_argument("--cipher-mode",
	metavar="xts-plain64",
	default=None,
	help="any cipher mode supported by cryptsetup, without the aes- prefix")
sub_create.add_argument("--hash",
	metavar="sha1",
	default=None,
	help="hash to use for PBKDF2 function")
sub_create.add_argument("--iter-time",
	metavar="1000",
	default=None,
	help="how long to iterate on the password with PBKDF2, in milliseconds")
sub_create.add_argument("--use-urandom",
	action="store_true",
	default=None,
	help="use /dev/urandom instead of cryptsetup's default;"
		"really only useful for testing")

sub_grow = subs.add_parser("grow", help="grow an existing vault")
sub_grow.set_defaults(func=grow)
sub_grow.add_argument("vault",
	metavar="vault.vlt",
	help="vault file to mount")
sub_grow.add_argument("how_much",
	help="how much to increase the size of the vault by, eg. 10m, 1g")

sub_shrink = subs.add_parser("shrink", help="shrink an existing vault")
sub_shrink.set_defaults(func=shrink)
sub_shrink.add_argument("vault",
	metavar="vault.vlt",
	help="vault file to mount")
sub_shrink.add_argument("how_much",
	help="how much to decrease the size of the vault by, eg. 10m, 1g")

args = parser.parse_args()
args.func(args)
